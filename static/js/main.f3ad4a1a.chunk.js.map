{"version":3,"sources":["assets/3-0.png","assets/3-1.png","assets/3-2.png","assets/3-3.png","assets/3-4.png","assets/3-5.png","assets/3-6.png","assets/3-7.png","assets/3-8.png","assets/3-9.png","assets/3-10.png","assets/3-11.png","assets/3-12.png","assets/3-13.png","assets/3-14.png","assets/3-15.png","constants/techs.js","components/ColoursBar/ColoursBar.js","components/TechGrid/TechGrid.js","App.js","reportWebVitals.js","index.js"],"names":["TECH_COLOURS","TECHS","TIER3","image","Tech30","name","colours","Tech31","Tech32","Tech33","Tech34","Tech35","Tech36","Tech37","Tech38","Tech39","Tech310","Tech311","Tech312","Tech313","Tech314","Tech315","createTechDefaults","tier","a","b","c","d","unsorted","Array","from","keys","unavailable","ColoursBar","onColourChange","className","map","colour","onClick","ROW_LABELS","allowDrop","event","preventDefault","Row","isDragTarget","label","leftComponent","rightComponent","onDragInto","onDragOver","onDrop","TechGrid","props","setSelectedColour","side","setState","selectedColours","state","beginDrag","index","row","dragItem","dragSource","completeDrag","dragTarget","techSorting","filter","i","left","right","rows","Object","entries","rowKey","rowLabel","leftTechs","reduce","filteredTechs","tech","includes","newTech","src","draggable","onDragStart","rightTechs","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3ad4a1a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/3-0.c7d1e6b6.png\";","export default __webpack_public_path__ + \"static/media/3-1.745d1033.png\";","export default __webpack_public_path__ + \"static/media/3-2.70ac2afb.png\";","export default __webpack_public_path__ + \"static/media/3-3.f149fab2.png\";","export default __webpack_public_path__ + \"static/media/3-4.982a073d.png\";","export default __webpack_public_path__ + \"static/media/3-5.7d11d9f9.png\";","export default __webpack_public_path__ + \"static/media/3-6.d04d8bde.png\";","export default __webpack_public_path__ + \"static/media/3-7.7e0dcee0.png\";","export default __webpack_public_path__ + \"static/media/3-8.dd45c300.png\";","export default __webpack_public_path__ + \"static/media/3-9.c46537c3.png\";","export default __webpack_public_path__ + \"static/media/3-10.3711c25c.png\";","export default __webpack_public_path__ + \"static/media/3-11.e6773351.png\";","export default __webpack_public_path__ + \"static/media/3-12.50e02cf1.png\";","export default __webpack_public_path__ + \"static/media/3-13.642a9e96.png\";","export default __webpack_public_path__ + \"static/media/3-14.c7f5e381.png\";","export default __webpack_public_path__ + \"static/media/3-15.eb6f1315.png\";","import Tech30 from \"../assets/3-0.png\";\r\nimport Tech31 from \"../assets/3-1.png\";\r\nimport Tech32 from \"../assets/3-2.png\";\r\nimport Tech33 from \"../assets/3-3.png\";\r\nimport Tech34 from \"../assets/3-4.png\";\r\nimport Tech35 from \"../assets/3-5.png\";\r\nimport Tech36 from \"../assets/3-6.png\";\r\nimport Tech37 from \"../assets/3-7.png\";\r\nimport Tech38 from \"../assets/3-8.png\";\r\nimport Tech39 from \"../assets/3-9.png\";\r\nimport Tech310 from \"../assets/3-10.png\";\r\nimport Tech311 from \"../assets/3-11.png\";\r\nimport Tech312 from \"../assets/3-12.png\";\r\nimport Tech313 from \"../assets/3-13.png\";\r\nimport Tech314 from \"../assets/3-14.png\";\r\nimport Tech315 from \"../assets/3-15.png\";\r\n\r\nexport const TECH_COLOURS = ['B', 'R', 'G', 'Y'];\r\n\r\nexport const TECHS = {\r\n    TIER3: [\r\n        {image: Tech30, name: 'Transdimensional AI', colours: ['B']},\r\n        {image: Tech31, name: 'Planetary-Scale Research', colours: ['B', 'R']},\r\n        {image: Tech32, name: 'Metahuman Chambers', colours: ['B', 'G']},\r\n        {image: Tech33, name: 'Hivemind Computing', colours: ['B', 'Y']},\r\n        {image: Tech34, name: 'Deep Space Megastructures', colours: ['R', 'B']},\r\n        {image: Tech35, name: 'Capital Ship', colours: ['R']},\r\n        {image: Tech36, name: 'Android Armada', colours: ['R', 'G']},\r\n        {image: Tech37, name: 'Mercenary Fleet', colours: ['R', 'Y']},\r\n        {image: Tech38, name: 'Cerebral Implants', colours: ['G', 'B']},\r\n        {image: Tech39, name: 'Manufacturing Orbitals', colours: ['G', 'R']},\r\n        {image: Tech310, name: 'Android Rights Movement', colours: ['G']},\r\n        {image: Tech311, name: 'Subatomic Fabrication', colours: ['G', 'Y']},\r\n        {image: Tech312, name: 'Quantum Data Exchange', colours: ['Y', 'B']},\r\n        {image: Tech313, name: 'Hyperdrive Boosters', colours: ['Y', 'R']},\r\n        {image: Tech314, name: 'Wormhole Technology', colours: ['Y', 'G']},\r\n        {image: Tech315, name: 'Stealth Terraformers', colours: ['Y']}\r\n    ]\r\n};\r\n\r\nexport const createTechDefaults = (tier = 3) => {\r\n    return {\r\n        a: [],\r\n        b: [],\r\n        c: [],\r\n        d: [],\r\n        unsorted: Array.from(TECHS[\"TIER\" + tier].keys()),\r\n        unavailable: []\r\n    };\r\n};\r\n","import React from 'react';\r\nimport './ColoursBar.css';\r\nimport { TECH_COLOURS } from '../../constants/techs';\r\n\r\nconst ColoursBar = ({ onColourChange }) => {\r\n    return <span className=\"ColoursBar\">\r\n        {TECH_COLOURS.map((colour) => (\r\n            <span key={colour} className={`ColoursBar-colour ColoursBar-colour--${colour}`} onClick={() => onColourChange(colour)} />\r\n        ))}\r\n    </span>\r\n}\r\n\r\nexport default ColoursBar;\r\n","import React from 'react';\r\nimport { TECHS, createTechDefaults } from '../../constants/techs';\r\nimport ColoursBar from '../ColoursBar/ColoursBar';\r\n\r\nimport \"./TechGrid.css\";\r\n\r\nconst ROW_LABELS = {\r\n    unsorted: \"Unsorted\",\r\n    unavailable: \"Unavailable\",\r\n    a: \"Good\",\r\n    b: \"OK\",\r\n    c: \"Suboptimal\",\r\n    d: \"Useless\",\r\n};\r\n\r\nconst allowDrop = event => event.preventDefault();\r\n\r\nconst Row = ({isDragTarget, label = \"\", leftComponent, rightComponent, onDragInto}) => (\r\n    <div className=\"TechGrid-Row\" { ...(isDragTarget ? {\r\n        onDragOver: allowDrop,\r\n        onDrop: onDragInto\r\n    } : {})}>\r\n        <div className=\"TechGrid-Row-dropCol\" >{leftComponent}</div>\r\n        <div className=\"TechGrid-Row-label\">{label}</div>\r\n        <div className=\"TechGrid-Row-dropCol\">{rightComponent}</div>\r\n    </div>\r\n)\r\n\r\nexport class TechGrid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            selectedColours: {\r\n                left: null,\r\n                right: null\r\n            },\r\n            techSorting: createTechDefaults(),\r\n            dragItem: -1\r\n        }\r\n    }\r\n\r\n    setSelectedColour = (side, colour) => {\r\n        this.setState({ \r\n            selectedColours: {\r\n                ...this.state.selectedColours,\r\n                [side]: colour\r\n            }\r\n        });\r\n    }\r\n\r\n    beginDrag = (index, row) => {\r\n        this.setState({\r\n            dragItem: index,\r\n            dragSource: row\r\n        });\r\n    }\r\n\r\n    completeDrag = (dragTarget) => {\r\n        if (this.state.dragSource && this.state.dragSource !== dragTarget) {\r\n            const techSorting = {\r\n                ...this.state.techSorting,\r\n                [this.state.dragSource]: this.state.techSorting[this.state.dragSource].filter(i => i !== this.state.dragItem),\r\n                [dragTarget]: [...this.state.techSorting[dragTarget], this.state.dragItem]\r\n            };\r\n\r\n            this.setState({\r\n                techSorting\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const rows = Object.entries(ROW_LABELS).map(([rowKey, rowLabel]) => {\r\n            const leftTechs = TECHS.TIER3\r\n                .reduce((filteredTechs, tech, index) => {\r\n                    if (\r\n                        tech.colours.includes(this.state.selectedColours.left) &&\r\n                        this.state.techSorting[rowKey].includes(index)\r\n                    ) {\r\n                        const newTech = <img key={index} className=\"TechGrid-tech\" src={tech.image} draggable={true} onDragStart={() => this.beginDrag(index, rowKey)} />;\r\n                        return [...filteredTechs, newTech];\r\n                    }\r\n                    return filteredTechs;\r\n                }, [])\r\n            const rightTechs = TECHS.TIER3\r\n                .reduce((filteredTechs, tech, index) => {\r\n                    if (\r\n                        tech.colours.includes(this.state.selectedColours.right) &&\r\n                        this.state.techSorting[rowKey].includes(index)\r\n                    ) {\r\n                        const newTech = <img key={index} className=\"TechGrid-tech\" src={tech.image} draggable={true} onDragStart={() => this.beginDrag(index, rowKey)} />;\r\n                        return [...filteredTechs, newTech];\r\n                    }\r\n                    return filteredTechs;\r\n                }, [])\r\n\r\n            return <Row\r\n                key={rowKey}\r\n                isDragTarget={true}\r\n                leftComponent={<>{leftTechs}</>}\r\n                rightComponent={<>{rightTechs}</>}\r\n                label={rowLabel}\r\n                onDragInto={() => this.completeDrag(rowKey)}\r\n            />;\r\n        });\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Row\r\n                    isDragTarget={false}\r\n                    leftComponent={<ColoursBar onColourChange={(colour) => this.setSelectedColour(\"left\", colour)} />}\r\n                    rightComponent={<ColoursBar onColourChange={(colour) => this.setSelectedColour(\"right\", colour)} />}\r\n                    label={\"Colours for comparison\"}\r\n                />\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport { TechGrid } from './components/TechGrid/TechGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <TechGrid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}